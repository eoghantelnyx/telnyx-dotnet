version: 25.13.0.{build}
image: Visual Studio 2017

environment:
  COVERALLS_REPO_TOKEN:
    secure: T0PmP8uyzCseacBCDRBlti2y9Tz5DL6fknea0MKWvbPYrzADmLY2/5kOTfYIsPUk
  # If you bump this, don't forget to bump `MinimumMockVersion` in `TelnyxMockFixture.cs` as well.
  Telnyx_MOCK_VERSION: 0.54.0

deploy:
- provider: NuGet
  api_key:
    secure: 2+Gqp6u9nwfDPD/Fw6T5vcW4A9qsTSQNysK1f4ZXa7r+2a3/d/f1f2dZYWvwke7F
  on:
    appveyor_repo_tag: true

cache:
  - telnyx-mock -> appveyor.yml

install:
  - ps: |
      If(!(Test-Path ".\telnyx-mock\telnyx-mock_${env:TELNYX_MOCK_VERSION}"))
      {
        New-Item -Name ".\telnyx-mock\telnyx-mock_${env:TELNYX_MOCK_VERSION}" -ItemType "directory" -Force | Out-Null
        wget "https://github.com/team-telnyx/telnyx-mock/releases/download/v${env:Telnyx_MOCK_VERSION}/Telnyx-mock_${env:TELNYX_MOCK_VERSION}_windows_amd64.tar.gz" -OutFile ".\telnyx-mock\telnyx-mock_${env:TELNYX_MOCK_VERSION}_windows_amd64.tar.gz"
        7z.exe e -y -o".\telnyx-mock" ".\telnyx-mock\telnyx-mock_${env:TELNYX_MOCK_VERSION}_windows_amd64.tar.gz" | Out-Null
        7z.exe x -y -o".\telnyx-mock\telnyx-mock_${env:TELNYX_MOCK_VERSION}" ".\telnyx-mock\Telnyx-mock_${env:TELNYX_MOCK_VERSION}_windows_amd64.tar" | Out-Null
      }
      $app = Start-Process -FilePath ".\telnyx-mock\telnyx-mock_${env:TELNYX_MOCK_VERSION}\telnyx-mock.exe" -ArgumentList "-strict-version-check" -NoNewWindow -PassThru
      Write-Host ("telnyx-mock running, Id = $($app.Id)`n") -ForegroundColor Green
      $env:PATH += ";" + (Get-Item -Path ".\telnyx-mock\telnyx-mock_${env:TELNYX_MOCK_VERSION}").FullName
  - dotnet tool install coveralls.net --version 1.0.0 --tool-path tools

before_build:
  - ps: Write-Host $("`n               HOST INFORMATION               `n") -BackgroundColor DarkCyan
  - dotnet --info
  - ps: Write-Host $("`n               RESTORING PACKAGES FOR ALL FRAMEWORKS               `n") -BackgroundColor DarkCyan
  - dotnet restore src\

build:
  parallel: true

build_script:
  - ps: Write-Host $("`n               BUILDING EVERYTHING               `n") -BackgroundColor DarkCyan
  - dotnet build src\Telnyx.net -c Release /p:ContinuousIntegrationBuild=true
  - dotnet build src\Telnyx.net -c Debug
  - dotnet build src\TelnyxTests -c Debug

after_build:
  - ps: Write-Host $("`n               PACKING UP               `n") -BackgroundColor DarkCyan
  - dotnet pack -c Release src\Telnyx.net

test_script:
  - ps: Write-Host $("`n               RUNNING TESTS               `n") -BackgroundColor DarkCyan
  - dotnet test src\TelnyxTests\TelnyxTests.csproj

after_test:
  - ps: Write-Host $("`n               RUNNING COVERAGE               `n") -BackgroundColor DarkCyan
  - dotnet test -c Debug -f netcoreapp2.1 src/TelnyxTests/TelnyxTests.csproj --no-build /p:CollectCoverage=true /p:CoverletOutputFormat=opencover
  - .\tools\csmacnz.Coveralls --opencover -i src/TelnyxTests/coverage.opencover.xml --useRelativePaths

artifacts:
  - path: 'src\Telnyx.net\bin\Release\*.nupkg'

# these commands tell appveyor to open an RDP session for debugging
#init:
#- ps: iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))
#
#on_finish:
#- ps: $blockRdp = $true; iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))
